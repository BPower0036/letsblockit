// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const countInstanceForUserAndFilter = `-- name: CountInstanceForUserAndFilter :one
SELECT COUNT(*)
FROM filter_instances
WHERE (user_id = $1 AND filter_name = $2)
`

type CountInstanceForUserAndFilterParams struct {
	UserID     uuid.UUID
	FilterName string
}

func (q *Queries) CountInstanceForUserAndFilter(ctx context.Context, arg CountInstanceForUserAndFilterParams) (int64, error) {
	row := q.db.QueryRow(ctx, countInstanceForUserAndFilter, arg.UserID, arg.FilterName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countListsForUser = `-- name: CountListsForUser :one
SELECT COUNT(*)
FROM filter_lists
WHERE user_id = $1
`

func (q *Queries) CountListsForUser(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countListsForUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createInstanceForUserAndFilter = `-- name: CreateInstanceForUserAndFilter :exec
INSERT INTO filter_instances (filter_list_id, user_id, filter_name, params)
VALUES ((SELECT id FROM filter_lists WHERE user_id = $1), $1, $2, $3)
`

type CreateInstanceForUserAndFilterParams struct {
	UserID     uuid.UUID
	FilterName string
	Params     pgtype.JSONB
}

func (q *Queries) CreateInstanceForUserAndFilter(ctx context.Context, arg CreateInstanceForUserAndFilterParams) error {
	_, err := q.db.Exec(ctx, createInstanceForUserAndFilter, arg.UserID, arg.FilterName, arg.Params)
	return err
}

const createListForUser = `-- name: CreateListForUser :one
INSERT INTO filter_lists (user_id)
VALUES ($1)
RETURNING token
`

func (q *Queries) CreateListForUser(ctx context.Context, userID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createListForUser, userID)
	var token uuid.UUID
	err := row.Scan(&token)
	return token, err
}

const deleteInstanceForUserAndFilter = `-- name: DeleteInstanceForUserAndFilter :exec
DELETE
FROM filter_instances
WHERE (user_id = $1 AND filter_name = $2)
`

type DeleteInstanceForUserAndFilterParams struct {
	UserID     uuid.UUID
	FilterName string
}

func (q *Queries) DeleteInstanceForUserAndFilter(ctx context.Context, arg DeleteInstanceForUserAndFilterParams) error {
	_, err := q.db.Exec(ctx, deleteInstanceForUserAndFilter, arg.UserID, arg.FilterName)
	return err
}

const getActiveFiltersForUser = `-- name: GetActiveFiltersForUser :many
SELECT filter_name, params
FROM filter_instances
WHERE user_id = $1
`

type GetActiveFiltersForUserRow struct {
	FilterName string
	Params     pgtype.JSONB
}

func (q *Queries) GetActiveFiltersForUser(ctx context.Context, userID uuid.UUID) ([]GetActiveFiltersForUserRow, error) {
	rows, err := q.db.Query(ctx, getActiveFiltersForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveFiltersForUserRow
	for rows.Next() {
		var i GetActiveFiltersForUserRow
		if err := rows.Scan(&i.FilterName, &i.Params); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBannedUsers = `-- name: GetBannedUsers :many
SELECT user_id
from banned_users
WHERE lifted_at IS NULL
`

func (q *Queries) GetBannedUsers(ctx context.Context) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getBannedUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var user_id uuid.UUID
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilterTemplates = `-- name: GetFilterTemplates :many
SELECT id, filter_name, template_hash, created_at, updated_at
FROM filter_templates
`

func (q *Queries) GetFilterTemplates(ctx context.Context) ([]FilterTemplate, error) {
	rows, err := q.db.Query(ctx, getFilterTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilterTemplate
	for rows.Next() {
		var i FilterTemplate
		if err := rows.Scan(
			&i.ID,
			&i.FilterName,
			&i.TemplateHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInstanceForUserAndFilter = `-- name: GetInstanceForUserAndFilter :one
SELECT params
FROM filter_instances
WHERE (user_id = $1 AND filter_name = $2)
`

type GetInstanceForUserAndFilterParams struct {
	UserID     uuid.UUID
	FilterName string
}

func (q *Queries) GetInstanceForUserAndFilter(ctx context.Context, arg GetInstanceForUserAndFilterParams) (pgtype.JSONB, error) {
	row := q.db.QueryRow(ctx, getInstanceForUserAndFilter, arg.UserID, arg.FilterName)
	var params pgtype.JSONB
	err := row.Scan(&params)
	return params, err
}

const getInstanceStats = `-- name: GetInstanceStats :many
SELECT COUNT(*), filter_name
FROM filter_instances
GROUP BY filter_name
`

type GetInstanceStatsRow struct {
	Count      int64
	FilterName string
}

func (q *Queries) GetInstanceStats(ctx context.Context) ([]GetInstanceStatsRow, error) {
	rows, err := q.db.Query(ctx, getInstanceStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInstanceStatsRow
	for rows.Next() {
		var i GetInstanceStatsRow
		if err := rows.Scan(&i.Count, &i.FilterName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInstancesForList = `-- name: GetInstancesForList :many
SELECT filter_name, params
FROM filter_instances
WHERE filter_list_id = $1
ORDER BY filter_name ASC
`

type GetInstancesForListRow struct {
	FilterName string
	Params     pgtype.JSONB
}

func (q *Queries) GetInstancesForList(ctx context.Context, filterListID int32) ([]GetInstancesForListRow, error) {
	rows, err := q.db.Query(ctx, getInstancesForList, filterListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInstancesForListRow
	for rows.Next() {
		var i GetInstancesForListRow
		if err := rows.Scan(&i.FilterName, &i.Params); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListForToken = `-- name: GetListForToken :one
SELECT id, user_id, downloaded
FROM filter_lists
WHERE token = $1
LIMIT 1
`

type GetListForTokenRow struct {
	ID         int32
	UserID     uuid.UUID
	Downloaded bool
}

func (q *Queries) GetListForToken(ctx context.Context, token uuid.UUID) (GetListForTokenRow, error) {
	row := q.db.QueryRow(ctx, getListForToken, token)
	var i GetListForTokenRow
	err := row.Scan(&i.ID, &i.UserID, &i.Downloaded)
	return i, err
}

const getListForUser = `-- name: GetListForUser :one
SELECT token,
       downloaded,
       (SELECT COUNT(*) FROM filter_instances WHERE filter_instances.user_id = $1) AS instance_count
FROM filter_lists
WHERE filter_lists.user_id = $1
LIMIT 1
`

type GetListForUserRow struct {
	Token         uuid.UUID
	Downloaded    bool
	InstanceCount int64
}

func (q *Queries) GetListForUser(ctx context.Context, userID uuid.UUID) (GetListForUserRow, error) {
	row := q.db.QueryRow(ctx, getListForUser, userID)
	var i GetListForUserRow
	err := row.Scan(&i.Token, &i.Downloaded, &i.InstanceCount)
	return i, err
}

const getStats = `-- name: GetStats :one
SELECT (SELECT COUNT(*) FROM filter_lists)                                                  as lists_total,
       (SELECT COUNT(*) FROM filter_lists WHERE downloaded IS TRUE)                         as lists_active,
       (SELECT COUNT(*) FROM filter_lists WHERE downloaded_at >= NOW() - INTERVAL '7 DAYS') as lists_fresh
`

type GetStatsRow struct {
	ListsTotal  int64
	ListsActive int64
	ListsFresh  int64
}

func (q *Queries) GetStats(ctx context.Context) (GetStatsRow, error) {
	row := q.db.QueryRow(ctx, getStats)
	var i GetStatsRow
	err := row.Scan(&i.ListsTotal, &i.ListsActive, &i.ListsFresh)
	return i, err
}

const hasUserDownloadedList = `-- name: HasUserDownloadedList :one
SELECT downloaded
FROM filter_lists
WHERE filter_lists.user_id = $1
LIMIT 1
`

func (q *Queries) HasUserDownloadedList(ctx context.Context, userID uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, hasUserDownloadedList, userID)
	var downloaded bool
	err := row.Scan(&downloaded)
	return downloaded, err
}

const markListDownloaded = `-- name: MarkListDownloaded :exec
UPDATE filter_lists
SET downloaded    = true,
    downloaded_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkListDownloaded(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, markListDownloaded, id)
	return err
}

const registerNewTemplate = `-- name: RegisterNewTemplate :one
INSERT INTO filter_templates (filter_name, template_hash)
VALUES ($1, $2)
RETURNING id, filter_name, template_hash, created_at, updated_at
`

type RegisterNewTemplateParams struct {
	FilterName   string
	TemplateHash int32
}

func (q *Queries) RegisterNewTemplate(ctx context.Context, arg RegisterNewTemplateParams) (FilterTemplate, error) {
	row := q.db.QueryRow(ctx, registerNewTemplate, arg.FilterName, arg.TemplateHash)
	var i FilterTemplate
	err := row.Scan(
		&i.ID,
		&i.FilterName,
		&i.TemplateHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerUpdatedTemplate = `-- name: RegisterUpdatedTemplate :one
UPDATE filter_templates
SET template_hash = $2,
    updated_at    = NOW()
WHERE id = $1
RETURNING id, filter_name, template_hash, created_at, updated_at
`

type RegisterUpdatedTemplateParams struct {
	ID           int32
	TemplateHash int32
}

func (q *Queries) RegisterUpdatedTemplate(ctx context.Context, arg RegisterUpdatedTemplateParams) (FilterTemplate, error) {
	row := q.db.QueryRow(ctx, registerUpdatedTemplate, arg.ID, arg.TemplateHash)
	var i FilterTemplate
	err := row.Scan(
		&i.ID,
		&i.FilterName,
		&i.TemplateHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const rotateListToken = `-- name: RotateListToken :exec
UPDATE filter_lists
SET token      = gen_random_uuid(),
    downloaded = false
WHERE user_id = $1
  AND token = $2
`

type RotateListTokenParams struct {
	UserID uuid.UUID
	Token  uuid.UUID
}

func (q *Queries) RotateListToken(ctx context.Context, arg RotateListTokenParams) error {
	_, err := q.db.Exec(ctx, rotateListToken, arg.UserID, arg.Token)
	return err
}

const updateInstanceForUserAndFilter = `-- name: UpdateInstanceForUserAndFilter :exec
UPDATE filter_instances
SET params     = $3,
    updated_at = NOW()
WHERE (user_id = $1 AND filter_name = $2)
`

type UpdateInstanceForUserAndFilterParams struct {
	UserID     uuid.UUID
	FilterName string
	Params     pgtype.JSONB
}

func (q *Queries) UpdateInstanceForUserAndFilter(ctx context.Context, arg UpdateInstanceForUserAndFilterParams) error {
	_, err := q.db.Exec(ctx, updateInstanceForUserAndFilter, arg.UserID, arg.FilterName, arg.Params)
	return err
}
